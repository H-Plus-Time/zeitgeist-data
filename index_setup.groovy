graph = TitanFactory.open('/root/titan/conf/titan-cassandra-es.properties')
mgmt = graph.openManagement()
mgmt.makeVertexLabel("keyword").make()
mgmt.makeVertexLabel("author").make()
mgmt.makeVertexLabel("article").make()
mgmt.makeEdgeLabel("wrote").make()
mgmt.makeEdgeLabel("present_in").make()
mgmt.commit()
mgmt = graph.openManagement()
mgmt.makePropertyKey('pmc').dataType(String.class).make()
mgmt.makePropertyKey('doi').dataType(String.class).make()
mgmt.makePropertyKey('pmid').dataType(String.class).make()
mgmt.makePropertyKey('full_title').dataType(String.class).make()
mgmt.makePropertyKey('publication_year').dataType(String.class).make()
mgmt.makePropertyKey('keyword').dataType(String.class).make()
mgmt.makePropertyKey('tag').dataType(String.class).make()
mgmt.makePropertyKey('sur_name').dataType(String.class).make()
mgmt.makePropertyKey('first_name').dataType(String.class).make()
mgmt.makePropertyKey('affiliation').dataType(String.class).make()
mgmt.makePropertyKey('priority').dataType(Integer.class).make()
mgmt.makePropertyKey('count').dataType(Integer.class).make()
mgmt.commit()

mgmt = graph.openManagement()
graph.tx().rollback()
pmc = mgmt.getPropertyKey('pmc')
doi = mgmt.getPropertyKey('doi')
pmid = mgmt.getPropertyKey('pmid')
full_title = mgmt.getPropertyKey('full_title')
publication_year = mgmt.getPropertyKey('publication_year')
keyword_prop = mgmt.getPropertyKey('keyword')
tag = mgmt.getPropertyKey('tag')
sur_name = mgmt.getPropertyKey('sur_name')
first_name = mgmt.getPropertyKey('first_name')
affiliation = mgmt.getPropertyKey('affiliation')

keyword = mgmt.getVertexLabel('keyword')
article = mgmt.getVertexLabel('article')
author = mgmt.getVertexLabel('author')

mgmt.buildIndex('byTaggedKeyword', Vertex.class).addKey(keyword_prop).addKey(tag).indexOnly(keyword).buildMixedIndex('search')
mgmt.buildIndex('byAuthor', Vertex.class).addKey(sur_name).addKey(first_name).addKey(affiliation).indexOnly(author).buildMixedIndex('search')
mgmt.buildIndex('byAuthorUnique', Vertex.class).addKey(sur_name).addKey(first_name).addKey(affiliation).indexOnly(author).buildCompositeIndex()
mgmt.buildIndex('byTaggedKeywordUnique', Vertex.class).addKey(keyword_prop).addKey(tag).indexOnly(keyword).unique().buildCompositeIndex()
mgmt.buildIndex('byPubIDTripleUnique', Vertex.class).addKey(pmc).addKey(pmid).addKey(doi).indexOnly(article).unique().buildCompositeIndex()
mgmt.buildIndex('byPubIDTripleElastic', Vertex.class).addKey(pmc).addKey(pmid).addKey(doi).addKey(full_title).indexOnly(article).buildMixedIndex('search')

mgmt.commit()

mgmt.awaitGraphIndexStatus(graph, 'byPubIDTripleUnique').call()
mgmt.awaitGraphIndexStatus(graph, 'byPubIDTripleElastic').call()
mgmt.awaitGraphIndexStatus(graph, 'byTaggedKeyword').call()
mgmt.awaitGraphIndexStatus(graph, 'byTaggedKeywordUnique').call()
mgmt.awaitGraphIndexStatus(graph, 'byAuthor').call()
mgmt.awaitGraphIndexStatus(graph, 'byAuthorUnique').call()

mgmt = graph.openManagement()
mgmt.updateIndex(mgmt.getGraphIndex("byPubIDTripleUnique"), SchemaAction.REINDEX).get()
mgmt.updateIndex(mgmt.getGraphIndex("byPubIDTripleElastic"), SchemaAction.REINDEX).get()
mgmt.updateIndex(mgmt.getGraphIndex("byTaggedKeyword"), SchemaAction.REINDEX).get()
mgmt.updateIndex(mgmt.getGraphIndex("byTaggedKeywordUnique"), SchemaAction.REINDEX).get()
mgmt.updateIndex(mgmt.getGraphIndex("byAuthor"), SchemaAction.REINDEX).get()
mgmt.updateIndex(mgmt.getGraphIndex("byAuthorUnique"), SchemaAction.REINDEX).get()
mgmt.commit()

// mgmt = graph.openManagement()
//
// priority = mgmt.getPropertyKey('priority')
// count = mgmt.getPropertyKey('count')
// wrote = mgmt.getEdgeLabel('wrote')
// present_in = mgmt.getEdgeLabel('present_in')
//
// mgmt.buildEdgeIndex(wrote, 'byWrotePriority', Direction.BOTH, priority)
// mgmt.buildEdgeIndex(present_in, 'present_inByCount', Direction.BOTH, count)
// mgmt.commit()
//
// mgmt.awaitGraphIndexStatus(graph, 'wroteByPriority').call()
// mgmt.awaitGraphIndexStatus(graph, 'present_inByCount').call()
// mgmt = graph.openManagement()
//
// mgmt.updateIndex(mgmt.getGraphIndex("wroteByPriority"), SchemaAction.REINDEX).get()
// mgmt.updateIndex(mgmt.getGraphIndex("present_inByCount"), SchemaAction.REINDEX).get()
// mgmt.commit()
